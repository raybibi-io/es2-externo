name: CI/CD Pipeline for NestJS with SonarQube

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  sonar-scanner:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3
        with: 
          fetch-depth: 0

      # Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Cache yarn dependencies (optional, improves performance)
      - name: Cache Yarn Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # Install dependencies using Yarn
      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      # Run tests with coverage
      - name: Run Tests
        run: yarn test --coverage 

      - name: SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          npx sonar-scanner \
            -Dsonar.projectKey=es2-pm_es2-externo \
            -Dsonar.sources=src \
            -Dsonar.organization=es2-pm \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.exclusions=src/**/*.spec.ts \
            -Dsonar.coverage.exclusions=src/**/*.spec.ts

  docker-build:
    runs-on: ubuntu-latest
    needs:
      - sonar-scanner
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        run: |
          echo "Building Docker image..."
          COMMIT_HASH="${GITHUB_SHA::8}"
          VERSION_TAG="${COMMIT_HASH}"
          LATEST_TAG="latest"
          docker build \
            --tag ${{ vars.DOCKER_URL }}:${VERSION_TAG} \
            --tag ${{ vars.DOCKER_URL }}:${LATEST_TAG} .
          docker push ${{ vars.DOCKER_URL }}:${VERSION_TAG}
          docker push ${{ vars.DOCKER_URL }}:${LATEST_TAG}

  deploy:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform apply
        run: |
          COMMIT="${GITHUB_SHA::8}"
          export TF_VAR_commit=$(echo "$COMMIT")
          cd terraform/
          terraform init
          terraform plan
          terraform apply -auto-approve
          echo "Done!"